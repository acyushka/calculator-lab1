import pytest

from src.tokenizer import tokenize
from src.converter import convert_to_rpn


@pytest.mark.parametrize("expression,expected", [
    # Унарные операторы в начале
    ("-", [("OP", "~")]),
    ("+", [("OP", "$")]),
    ("-5", [("NUM", 5.0), ("OP", "~")]),
    ("+5", [("NUM", 5.0), ("OP", "$")]),

    # Унарные операторы после скобок
    ("(-)", [("OP", "~")]),
    ("(+)", [("OP", "$")]),
    ("(-5)", [("NUM", 5.0), ("OP", "~")]),
    ("(+3)", [("NUM", 3.0), ("OP", "$")]),

    # Комбинированные выражения
    ("5 + (-3)", [
        ("NUM", 5.0), ("NUM", 3.0), ("OP", "~"), ("OP", "+")
    ]),
    ("10 * (+2)", [
        ("NUM", 10.0), ("NUM", 2.0), ("OP", "$"), ("OP", "*")
    ]),
    ("2 ** (-3)", [
        ("NUM", 2.0), ("NUM", 3.0), ("OP", "~"), ("OP", "**")
    ]),
    ("-5 + (-3)", [
        ("NUM", 5.0), ("OP", "~"), ("NUM", 3.0), ("OP", "~"), ("OP", "+")
    ]),
    ("+3 * (-2)", [
        ("NUM", 3.0), ("OP", "$"), ("NUM", 2.0), ("OP", "~"), ("OP", "*")
    ]),
    ("-(7+7)", [
        ("NUM", 7.0), ("NUM", 7.0), ("OP", "+"), ("OP", "~"),
    ]),
    ("(-1) * (-2) * (-3) * (-4)", [
        ("NUM", 1.0), ("OP", "~"), ("NUM", 2.0), ("OP", "~"), ("OP", "*"),
        ("NUM", 3.0), ("OP", "~"), ("OP", "*"), ("NUM", 4.0), ("OP", "~"),
        ("OP", "*")
    ]),
])
def test_unary_operators(self, expression, expected):
    """Тест унарных операторов"""
    tokens = tokenize(expression)
    result = convert_to_rpn(tokens)
    assert result == expected


@pytest.mark.parametrize("expression,expected", [
    # Простые выражения
    ("24343 + 343", [
        ("NUM", 24343.0), ("NUM", 343.0), ("OP", "+")
    ]),
    ("   5 - 2", [
        ("NUM", 5.0), ("NUM", 2.0), ("OP", "-")
    ]),
    ("3 *    4", [
        ("NUM", 3.0), ("NUM", 4.0), ("OP", "*")
    ]),
    ("8 / 2", [
        ("NUM", 8.0), ("NUM", 2.0), ("OP", "/")
    ]),
    ("10 // 3", [
        ("NUM", 10.0), ("NUM", 3.0), ("OP", "//")
    ]),
    ("7 % 3", [
        ("NUM", 7.0), ("NUM", 3.0), ("OP", "%")
    ]),

    # Не очень простые выражения
    ("2 + 3 * 4", [
        ("NUM", 2.0), ("NUM", 3.0), ("NUM", 4.0), ("OP", "*"), ("OP", "+")
    ]),
    ("2    * 3 + 4", [
        ("NUM", 2.0), ("NUM", 3.0), ("OP", "*"), ("NUM", 4.0), ("OP", "+")
    ]),
    ("10 // 3 % 2", [
        ("NUM", 10.0), ("NUM", 3.0), ("OP", "//"), ("NUM", 2.0), ("OP", "%")
    ]),
    ("(7 +   3) * 4", [
        ("NUM", 7.0), ("NUM", 3.0), ("OP", "+"), ("NUM", 4.0), ("OP", "*")
    ]),
    ("2 * (3 + 4)", [
        ("NUM", 2.0), ("NUM", 3.0), ("NUM", 4.0), ("OP", "+"), ("OP", "*")
    ]),
])
def test_basic_expressions(self, expression, expected):
    """Тест простых выражений"""
    tokens = tokenize(expression)
    result = convert_to_rpn(tokens)
    assert result == expected


@pytest.mark.parametrize("expression,expected", [
    ("2 **  3", [
        ("NUM", 2.0), ("NUM", 3.0), ("OP", "**")
    ]),
    ("2 ** 3 ** 2", [
        ("NUM", 2.0), ("NUM", 3.0), ("NUM", 2.0), ("OP", "**"), ("OP", "**")
    ]),
    ("-2    ** 3", [
        ("NUM", 2.0), ("OP", "~"), ("NUM", 3.0), ("OP", "**")
    ]),
    ("2 ** 3 +     1", [
        ("NUM", 2.0), ("NUM", 3.0), ("OP", "**"), ("NUM", 1.0), ("OP", "+")
    ]),
    ("2 + 3 ** 4", [
        ("NUM", 2.0), ("NUM", 3.0), ("NUM", 4.0), ("OP", "**"), ("OP", "+")
    ]),
    ("2 * 3 ** 4", [
        ("NUM", 2.0), ("NUM", 3.0), ("NUM", 4.0), ("OP", "**"), ("OP", "*")
    ]),
    ("2 ** 3 * 4", [
        ("NUM", 2.0), ("NUM", 3.0), ("OP", "**"), ("NUM", 4.0), ("OP", "*")
    ]),
    ("(2 ** 3) ** 2", [
        ("NUM", 2.0), ("NUM", 3.0), ("OP", "**"), ("NUM", 2.0), ("OP", "**")
    ]),
    ("2 ** (3 ** 2)", [
        ("NUM", 2.0), ("NUM", 3.0), ("NUM", 2.0), ("OP", "**"), ("OP", "**")
    ]),
    ("(2 ** 3) * (4 ** 5)", [
        ("NUM", 2.0), ("NUM", 3.0), ("OP", "**"), ("NUM", 4.0),
        ("NUM", 5.0), ("OP", "**"), ("OP", "*")
    ]),
    ("-2    ** 3 ** (+4)", [
        ("NUM", 2.0), ("OP", "~"), ("NUM", 3.0), ("NUM", 4.0),
        ("OP", "$"), ("OP", "**"), ("OP", "**")
    ]),
    ("2 ** 3 ** 2 + 1", [
        ("NUM", 2.0), ("NUM", 3.0), ("NUM", 2.0), ("OP", "**"),
        ("OP", "**"), ("NUM", 1.0), ("OP", "+")
    ]),
    ("(2 ** 3) ** (4 ** 5)", [
        ("NUM", 2.0), ("NUM", 3.0), ("OP", "**"), ("NUM", 4.0), ("NUM", 5.0),
        ("OP", "**"), ("OP", "**")
    ]),
])
def test_power_operator(self, expression, expected):
    """Тест операций возведения в степень"""
    tokens = tokenize(expression)
    result = convert_to_rpn(tokens)
    assert result == expected


@pytest.mark.parametrize("expression,expected", [
    ("(22 + 300) * (400 - 1000)", [
        ("NUM", 22.0), ("NUM", 300.0), ("OP", "+"), ("NUM", 400.0),
        ("NUM", 1000.0), ("OP", "-"), ("OP", "*")
    ]),
    ("2 + 321 * 4 - 5 / 2", [
        ("NUM", 2.0), ("NUM", 321.0), ("NUM", 4.0), ("OP", "*"),
        ("OP", "+"), ("NUM", 5.0), ("NUM", 2.0), ("OP", "/"), ("OP", "-")
    ]),
    ("(-2) * (+3) - (-1)", [
        ("NUM", 2.0), ("OP", "~"), ("NUM", 3.0), ("OP", "$"),
        ("OP", "*"), ("NUM", 1.0), ("OP", "~"), ("OP", "-")
    ]),
    ("(2 + (-3)) * (+4 - 1)", [
        ("NUM", 2.0), ("NUM", 3.0), ("OP", "~"), ("OP", "+"),
        ("NUM", 4.0), ("OP", "$"), ("NUM", 1.0), ("OP", "-"), ("OP", "*")
    ]),
    ("2 ** 3 ** 2 / 4 ** 2 * 8 // 16", [
        ("NUM", 2.0), ("NUM", 3.0), ("NUM", 2.0), ("OP", "**"), ("OP", "**"),
        ("NUM", 4.0), ("NUM", 2.0), ("OP", "**"), ("OP", "/"), ("NUM", 8.0),
        ("OP", "*"), ("NUM", 16.0), ("OP", "//")
    ]),
    ("1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 + 10", [
        ("NUM", 1.0), ("NUM", 2.0), ("OP", "+"), ("NUM", 3.0), ("OP", "+"),
        ("NUM", 4.0), ("OP", "+"), ("NUM", 5.0), ("OP", "+"), ("NUM", 6.0),
        ("OP", "+"), ("NUM", 7.0), ("OP", "+"), ("NUM", 8.0), ("OP", "+"),
        ("NUM", 9.0), ("OP", "+"), ("NUM", 10.0), ("OP", "+")
    ]),
    ("(((-1 ** (+2)) * (-3)) // (+4)) % (-5) ** (+6)", [
        ("NUM", 1.0), ("OP", "~"), ("NUM", 2.0), ("OP", "$"), ("OP", "**"),
        ("NUM", 3.0), ("OP", "~"), ("OP", "*"), ("NUM", 4.0), ("OP", "$"),
        ("OP", "//"), ("NUM", 5.0), ("OP", "~"), ("NUM", 6.0), ("OP", "$"),
        ("OP", "**"), ("OP", "%")
    ]),
    ("((2 + 3) * (4 - 1) **   2) // 5 + 6 % 3", [
        ("NUM", 2.0), ("NUM", 3.0), ("OP", "+"), ("NUM", 4.0), ("NUM", 1.0),
        ("OP", "-"), ("NUM", 2.0), ("OP", "**"), ("OP", "*"), ("NUM", 5.0),
        ("OP", "//"), ("NUM", 6.0), ("NUM", 3.0), ("OP", "%"), ("OP", "+")
    ]),
    ("-2 ** (+3) * (5-(-1)) // (+4) % 2", [
        ("NUM", 2.0), ("OP", "~"), ("NUM", 3.0), ("OP", "$"), ("OP", "**"),
        ("NUM", 5.0), ("NUM", 1.0), ("OP", "~"), ("OP", "-"), ("OP", "*"),
        ("NUM", 4.0), ("OP", "$"), ("OP", "//"), ("NUM", 2.0), ("OP", "%")
    ]),
    ("(1 + 2) ** (3 * 4) - 5 // 6 + 7 % 8 * 9", [
        ("NUM", 1.0), ("NUM", 2.0), ("OP", "+"), ("NUM", 3.0), ("NUM", 4.0),
        ("OP", "*"), ("OP", "**"), ("NUM", 5.0), ("NUM", 6.0), ("OP", "//"),
        ("OP", "-"), ("NUM", 7.0), ("NUM", 8.0), ("OP", "%"), ("NUM", 9.0),
        ("OP", "*"), ("OP", "+")
    ]),
    ("((((1 + 2) * 3) - 4) ** 5) // 6.0", [
        ("NUM", 1.0), ("NUM", 2.0), ("OP", "+"), ("NUM", 3.0), ("OP", "*"),
        ("NUM", 4.0), ("OP", "-"), ("NUM", 5.0), ("OP", "**"), ("NUM", 6.0),
        ("OP", "//")
    ]),
    ("1 + (2 * (3 - (4 ** (5 // 6))))", [
        ("NUM", 1.0), ("NUM", 2.0), ("NUM", 3.0), ("NUM", 4.0), ("NUM", 5.0),
        ("NUM", 6.0), ("OP", "//"), ("OP", "**"), ("OP", "-"), ("OP", "*"),
        ("OP", "+")
    ]),
])
def test_complex_expressions(self, expression, expected):
    """Тест сложных выражений"""
    tokens = tokenize(expression)
    result = convert_to_rpn(tokens)
    assert result == expected
